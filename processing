import processing.video.*;
import processing.serial.*;

Capture video;
Serial myPort;

int blackestX;
int blackestY;
int sixty;

void setup() {
  size(800, 600);
  // Uses the default video input, see the reference if this causes an error
  
  //println(Capture.list());//prints out available cameras
  
  String[] cameras = Capture.list();
  
  if (cameras.length == 0) {
    println("There are no cameras available for capture.");
    exit();
  } else {
    println("Available cameras:");
    for (int i = 0; i < cameras.length; i++) {
      println(cameras[i]);
    }
  }
  
  //String camera = cameras[0];
  
  video = new Capture(this, cameras[18]);
  video.start();  
  noStroke();
  smooth();
  
  String portName = Serial.list()[3]; //change the 0 to a 1 or 2 etc. to match your port
  myPort = new Serial(this, portName, 9600);
  
  blackestX = 400; // X-coordinate of the brightest video pixel
  blackestY = 300; // Y-coordinate of the brightest video pixel
  sixty = 0;
}

void draw() {
  if (video.available()) {
    video.read();
    image(video, 0, 0, width, height); // Draw the webcam video onto the screen
    float blackestValue = 0; // Brightness of the brightest video pixel
    // Search for the brightest pixel: For each row of pixels in the video image and
    // for each pixel in the yth row, compute each pixel's index in the video
    video.loadPixels();
    int index = 0;
    for (int y = 0; y < video.height; y++) {
      for (int x = 0; x < video.width; x++) {
        // Get the color stored in the pixel
        int pixelColor = video.pixels[index];

        int r = (pixelColor >> 16) & 0xff;
        int g = (pixelColor >> 8) & 0xff;
        int b = pixelColor & 0xff;
        
        int blackness = b-g-r;
        
        if(blackness > blackestValue){
          blackestValue = blackness;
          blackestX = x;
          blackestY = y;
        }
        
        /*if(blackness > blackestValue){
          if(sixty == 0){
            if((abs(blackestX-x) < 60 && abs(blackestY-y) < 60) && (abs(blackestX-x) > 5 && abs(blackestY-y) > 5)){
              blackestValue = blackness;
              blackestX = x;
              blackestY = y;
            } else {
              sixty = 1;
            }
          }
          if(sixty == 1){
            if((abs(blackestX-x) < 800 && abs(blackestY-y) < 600) && (abs(blackestX-x) > 5 && abs(blackestY-y) > 5)){
              blackestValue = blackness;
              blackestX = x;
              blackestY = y;
            } else {
              sixty = 0;
            }
          }
        }
        */
        
        index++;
      }
    }
    // Draw a large, yellow circle at the brightest pixel
    //fill(255, 204, 0, 128);
    ellipse(blackestX, blackestY, 100, 100);
    
    int xDegree = (int)map((int)(((double)blackestX/video.width)*180),0,180,15,165);
    int yDegree = (int)map((int)(((double)blackestY/video.height)*180),0,180,15,165);
    
    System.out.println(yDegree);
    
    byte out[] = new byte[2];
    out[0] = byte(xDegree);
    out[1] = byte(yDegree);
    myPort.write(out);
    delay(10);
  }
}
